


/* O(n**2) solution */
function pairwise_solution_1(arr, arg){

    // STEP-1: intialise sum variable
    let sum = 0;

    // STEP-2: pair search: first loop
    for (let aIndex = 0; aIndex < arr.length; aIndex++) {

      // STEP-3: pair validation - a 
      let a = arr[aIndex];
      if (a === null) continue;

      // STEP-4: pair search: second loop      
      for (let bIndex = aIndex + 1; bIndex < arr.length; bIndex++) {

        // STEP-5: pair validation - b 
        let b = arr[bIndex];
        if (aIndex !== bIndex && b !== null && a + b === arg) {

          // STEP-6: utilize the valid pair
          sum += aIndex + bIndex;

          // STEP-7: pair elimination
          arr[aIndex] = null
          arr[bIndex] = null
        }
      }
    }

    // STEP-8: return the sum
    console.log(sum);
    return sum;
}

pairwise_solution_1([1,4,2,3,0,5], 7);
pairwise_solution_1([1, 3, 2, 4], 4);
pairwise_solution_1([1, 1, 1], 2);
pairwise_solution_1([0, 0, 0, 0, 1, 1], 1);
pairwise_solution_1([], 100);
console.log("\n\n")












/* O(n) solution */
function pairwise(arr, arg) {

    // STEP-1:initialize a sum variable
    let sum = 0;

    // STEP-2: Obtain a new data structure
    let arrNew = {};
    arr.forEach((item, index)=>{
      if (arrNew[item]) arrNew[item].indices.push(index);
      else arrNew[item] = {indices: [index], pointer: 0};
    })

    // STEP-3: inspect each element in the array `arr`
    for (let a of arr){

    // STEP-4: obtain the complement b
    let b = arg - a;

    // STEP-5: validate the pair - check if complement exist
    if (arrNew[b]){

      // STEP-6: retrieve `b` Information & retrieve `a` Information
      const bIndices = arrNew[b].indices;
      let bPointer = arrNew[b].pointer;
      const aIndices = arrNew[a].indices;
      let aPointer = arrNew[a].pointer;

      // STEP-7: handle the edge case, a & b have same numeric value
      if (b === a) bPointer = bPointer + 1; 

      // STEP-8: validate pair - check that a & b are not already in a pairing
      if (bPointer < bIndices.length && aPointer < aIndices.length) {

        // STEP-9: update the sum count, the aPointer & bPointer
        sum += aIndices[aPointer] + bIndices[bPointer];
        arrNew[a].pointer += 1;
        arrNew[b].pointer += 1;
      }
    }
   }

   // STEP-10: return the accumulated sum
   console.log(sum);
   return sum;
}

pairwise([1,4,2,3,0,5], 7);
pairwise([1, 3, 2, 4], 4);
pairwise([1, 1, 1], 2);
pairwise([0, 0, 0, 0, 1, 1], 1);
pairwise([], 100);
console.log("\n\n")








